Index: shell/permissions.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- shell/permissions.sh	(date 1527344820000)
+++ shell/permissions.sh	(date 1527344820000)
@@ -0,0 +1,5 @@
+#!/usr/bin/env bash
+
+chmod -R 777 var
+chmod -R 777 config
+chmod +rw shell/
\ No newline at end of file
Index: src/Controller/AppConfigurationController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n/**\n * Configuration Wizard controller actions\n */\n\nnamespace App\\Controller;\n\n\nuse App\\Helper\\Utils;\nuse Aws\\Exception\\AwsException;\nuse Aws\\S3\\S3Client;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Process\\Process;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Yaml\\Yaml;\n\nclass AppConfigurationController extends Controller\n{\n    use Utils;\n\n    /**\n     * @Route(\"/install\", name=\"installconfig\")\n     */\n    public function install() {\n        return $this->render(\"install.twig\", [\"error\" => \"\"]);\n    }\n    /**\n     * @Route(\"/installsuccess\")\n     */\n    public function installsuccess() {\n        return $this->render(\"install_success.twig\");\n    }\n\n    /**\n     * @Route(\"/updateconfig\", methods={\"POST\"})\n     */\n    public function updateconfig(Request $request) {\n        $config = [];\n        $config['parameters']['rdbms_host'] = $request->request->get('rdbms_host');\n        $config['parameters']['rdbms_dbname'] = $request->request->get('rdbms_dbname');\n        $config['parameters']['rdbms_user'] = $request->request->get('rdbms_user');\n        $config['parameters']['rdbms_password'] = $request->request->get('rdbms_password');\n        $config['parameters']['aws_credentials_key'] = $request->request->get('aws_credentials_key');\n        $config['parameters']['aws_credentials_secret'] = $request->request->get('aws_credentials_secret');\n        $config['parameters']['athena_directory'] = $request->request->get('athena_directory');\n        $config['parameters']['athena_database'] = $request->request->get('athena_database');\n        $config['parameters']['athena_input'] = \"s3://\".$request->request->get('s3_bucket').DIRECTORY_SEPARATOR;\n        $config['parameters']['athena_output'] = \"s3://\".$request->request->get('s3_bucket').DIRECTORY_SEPARATOR.\"athena-output\".DIRECTORY_SEPARATOR;\n        $config['parameters']['sqs_notificationQueue'] = $request->request->get('sqs_notificationQueue');\n        $config['parameters']['s3_bucket'] = $request->request->get('s3_bucket');\n        $config['parameters']['need_update'] = \"no\";\n\n        $config_file_path = join(DIRECTORY_SEPARATOR, [$this->getParameter('kernel.project_dir'), \"config\", \"install.yaml\"]);\n        $backup_config_file_path = join(DIRECTORY_SEPARATOR, [$this->getParameter('kernel.project_dir'), \"config\", $this->getParameter(\"install_config_file\").\".bak\"]);\n\n        // bakup config file\n        copy($config_file_path, $backup_config_file_path);\n        // copy the config contents to the config file\n        file_put_contents($config_file_path, Yaml::dump($config));\n\n        // now need to reload the cache\n       $cache_clear = new Process(\"bin/console cache:clear\", $this->getParameter('kernel.project_dir'));\n       $cache_clear->run();\n        $cache_warmup = new Process(\"bin/console cache:warmup\", $this->getParameter('kernel.project_dir'));\n        $cache_warmup->run();\n\n       return $this->redirect(\"setupconfiguration\");\n\n    }\n\n\n    /**\n     * @Route(\"setupconfiguration\", name=\"setupconfiguration\")\n     */\n    public function setupConfiguration() {\n        $s3_bucket_result = $this->createAppBucket();\n        if (!empty($s3_bucket_result['error'])) {\n            $this->render('install.twig',['error' => \" Error creating S3 bucket \".$s3_bucket_result['error']]);\n        }\n\n        $athena_dir_result = $this->createAthenaDirectories();\n        if (!empty($athena_dir_result['error'])) {\n            $this->render('install.twig',['error' => \"Error creating Athena directories in S3 \".$athena_dir_result['error']]);\n        }\n\n        $athena_db_result = $this->createAthenaDatabase();\n        if (!empty($athena_db_result['error'])) {\n            $this->render('install.twig',['error' => \"Error creating Athena database \".$athena_db_result['error']]);\n        }\n\n        return $this->render('install_success.twig');\n    }\n\n    /**\n     * Create the configured S3 bucket\n     *\n     * @param S3Client\n     *\n     * @return array\n     */\n    public function createAppBucket() {\n        $s3 = $this->getS3Client();\n        $bucket = $this->getS3Bucket();\n        $isBucketExists = $s3->doesBucketExist($bucket);\n        $result = [];\n        if (!$isBucketExists) {\n            try {\n                $result = $s3->createBucket([\n                    'Bucket' => $bucket, // REQUIRED\n                ]);\n            } catch (AwsException $e) {\n                $result['error'] = $e->getMessage();\n            }\n        }\n        return $result;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function createAthenaDirectories() {\n        $s3 = $this->getS3Client();\n        $bucket = $this->getS3Bucket();\n        $athenaDir = $this->getParameter('athena_directory');\n        $bills = $athenaDir.\"bills/\";\n        $invoices = $athenaDir.\"invoices/\";\n        $result = [];\n        try {\n            $result['athena'] = $s3->putObject([\n                'Bucket' => $bucket, // REQUIRED\n                'Key'    => $athenaDir\n            ]);\n            $result['bills'] = $s3->putObject([\n                'Bucket' => $bucket, // REQUIRED\n                'Key'    => $bills\n            ]);\n            $result['invoices'] = $s3->putObject([\n                'Bucket' => $bucket, // REQUIRED\n                'Key'    => $invoices\n            ]);\n        } catch (AwsException $e) {\n            $result['error'] = $e->getMessage();\n        }\n\n        return $result;\n    }\n\n    public function createAthenaDatabase() {\n        $athenaClient = $this->getAthenaClient();\n        $query = \"CREATE DATABASE IF NOT EXISTS \".$this->getParameter(\"athena_database\").\";\";\n        $result = [];\n        try {\n            $result = $this->processAthenaQuery($athenaClient, $query);\n        } catch (AwsException $e) {\n            $result['error'] = $e->getMessage();\n        } catch (\\Exception $e) {\n            $result['error'] = $e->getMessage();\n        }\n        return $result;\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Controller/AppConfigurationController.php	(revision 3af1853ecae2242c6bef5679ea2576ad6c567d75)
+++ src/Controller/AppConfigurationController.php	(date 1527340636000)
@@ -60,9 +60,9 @@
         file_put_contents($config_file_path, Yaml::dump($config));
 
         // now need to reload the cache
-       $cache_clear = new Process("bin/console cache:clear", $this->getParameter('kernel.project_dir'));
+       $cache_clear = new Process("bin/console cache:clear --env=".$request->server->get('APP_ENV'), $this->getParameter('kernel.project_dir'));
        $cache_clear->run();
-        $cache_warmup = new Process("bin/console cache:warmup", $this->getParameter('kernel.project_dir'));
+        $cache_warmup = new Process("bin/console cache:warmup --env=".$request->server->get('APP_ENV'), $this->getParameter('kernel.project_dir'));
         $cache_warmup->run();
 
        return $this->redirect("setupconfiguration");
