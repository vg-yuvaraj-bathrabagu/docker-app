<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Account extends \App\Entity\Account implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'name', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'description', 'datecreated', 'uuid', 'dashboardurl', 'currentactivityurl', 'historyactivityurl', 'nexusreporturl', 'snstopic'];
        }

        return ['__isInitialized__', 'id', 'name', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'description', 'datecreated', 'uuid', 'dashboardurl', 'currentactivityurl', 'historyactivityurl', 'nexusreporturl', 'snstopic'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Account $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toString', []);

        return parent::toString();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(int $id): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDatecreated(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatecreated', []);

        return parent::getDatecreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setDatecreated(\DateTime $datecreated): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDatecreated', [$datecreated]);

        parent::setDatecreated($datecreated);
    }

    /**
     * {@inheritDoc}
     */
    public function getUuid(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUuid', []);

        return parent::getUuid();
    }

    /**
     * {@inheritDoc}
     */
    public function setUuid(string $uuid): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUuid', [$uuid]);

        parent::setUuid($uuid);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription(string $description): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDashboardurl(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDashboardurl', []);

        return parent::getDashboardurl();
    }

    /**
     * {@inheritDoc}
     */
    public function setDashboardurl(string $dashboardurl): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDashboardurl', [$dashboardurl]);

        parent::setDashboardurl($dashboardurl);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentactivityurl(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrentactivityurl', []);

        return parent::getCurrentactivityurl();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrentactivityurl(string $currentactivityurl): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrentactivityurl', [$currentactivityurl]);

        parent::setCurrentactivityurl($currentactivityurl);
    }

    /**
     * {@inheritDoc}
     */
    public function getHistoryactivityurl(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHistoryactivityurl', []);

        return parent::getHistoryactivityurl();
    }

    /**
     * {@inheritDoc}
     */
    public function setHistoryactivityurl(string $historyactivityurl): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHistoryactivityurl', [$historyactivityurl]);

        parent::setHistoryactivityurl($historyactivityurl);
    }

    /**
     * {@inheritDoc}
     */
    public function getSNSTopic(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSNSTopic', []);

        return parent::getSNSTopic();
    }

    /**
     * {@inheritDoc}
     */
    public function getNexusreporturl(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNexusreporturl', []);

        return parent::getNexusreporturl();
    }

    /**
     * {@inheritDoc}
     */
    public function setNexusreporturl(string $nexusreporturl): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNexusreporturl', [$nexusreporturl]);

        parent::setNexusreporturl($nexusreporturl);
    }

}
