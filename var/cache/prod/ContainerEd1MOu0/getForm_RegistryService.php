<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'form.registry' shared service.

include_once $this->targetDirs[3].'/vendor/symfony/form/FormRegistryInterface.php';
include_once $this->targetDirs[3].'/vendor/symfony/form/FormRegistry.php';
include_once $this->targetDirs[3].'/vendor/symfony/form/FormExtensionInterface.php';
include_once $this->targetDirs[3].'/vendor/symfony/form/Extension/DependencyInjection/DependencyInjectionExtension.php';
include_once $this->targetDirs[3].'/vendor/symfony/form/ResolvedFormTypeFactoryInterface.php';
include_once $this->targetDirs[3].'/vendor/symfony/form/ResolvedFormTypeFactory.php';

return $this->privates['form.registry'] = new \Symfony\Component\Form\FormRegistry([0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\ServiceLocator(['App\\Form\\FileWatcherType' => function () {
    return ($this->privates['App\\Form\\FileWatcherType'] ?? ($this->privates['App\\Form\\FileWatcherType'] = new \App\Form\FileWatcherType()));
}, 'App\\Form\\LookupValuesType' => function () {
    return ($this->privates['App\\Form\\LookupValuesType'] ?? ($this->privates['App\\Form\\LookupValuesType'] = new \App\Form\LookupValuesType()));
}, 'App\\Form\\NexusAnalysisType' => function () {
    return ($this->privates['App\\Form\\NexusAnalysisType'] ?? ($this->privates['App\\Form\\NexusAnalysisType'] = new \App\Form\NexusAnalysisType()));
}, 'App\\Form\\ProjectAssignmentType' => function () {
    return ($this->privates['App\\Form\\ProjectAssignmentType'] ?? ($this->privates['App\\Form\\ProjectAssignmentType'] = new \App\Form\ProjectAssignmentType()));
}, 'App\\Form\\ProjectRateType' => function () {
    return ($this->privates['App\\Form\\ProjectRateType'] ?? ($this->privates['App\\Form\\ProjectRateType'] = new \App\Form\ProjectRateType()));
}, 'App\\Form\\ProjectType' => function () {
    return ($this->privates['App\\Form\\ProjectType'] ?? ($this->privates['App\\Form\\ProjectType'] = new \App\Form\ProjectType()));
}, 'App\\Form\\QueryType' => function () {
    return ($this->privates['App\\Form\\QueryType'] ?? ($this->privates['App\\Form\\QueryType'] = new \App\Form\QueryType()));
}, 'App\\Form\\TaskCategoryType' => function () {
    return ($this->privates['App\\Form\\TaskCategoryType'] ?? ($this->privates['App\\Form\\TaskCategoryType'] = new \App\Form\TaskCategoryType()));
}, 'App\\Form\\TaskQueueType' => function () {
    return ($this->privates['App\\Form\\TaskQueueType'] ?? ($this->privates['App\\Form\\TaskQueueType'] = new \App\Form\TaskQueueType()));
}, 'App\\Form\\TaskTemplateDetailType' => function () {
    return ($this->privates['App\\Form\\TaskTemplateDetailType'] ?? ($this->privates['App\\Form\\TaskTemplateDetailType'] = new \App\Form\TaskTemplateDetailType()));
}, 'App\\Form\\TaskType' => function () {
    return ($this->privates['App\\Form\\TaskType'] ?? ($this->privates['App\\Form\\TaskType'] = new \App\Form\TaskType()));
}, 'App\\Form\\TemplateType' => function () {
    return ($this->privates['App\\Form\\TemplateType'] ?? ($this->privates['App\\Form\\TemplateType'] = new \App\Form\TemplateType()));
}, 'App\\Form\\User\\ForgotPasswordType' => function () {
    return ($this->privates['App\\Form\\User\\ForgotPasswordType'] ?? ($this->privates['App\\Form\\User\\ForgotPasswordType'] = new \App\Form\User\ForgotPasswordType()));
}, 'App\\Form\\User\\LoginType' => function () {
    return ($this->privates['App\\Form\\User\\LoginType'] ?? ($this->privates['App\\Form\\User\\LoginType'] = new \App\Form\User\LoginType()));
}, 'App\\Form\\User\\ResetPasswordType' => function () {
    return ($this->privates['App\\Form\\User\\ResetPasswordType'] ?? ($this->privates['App\\Form\\User\\ResetPasswordType'] = new \App\Form\User\ResetPasswordType()));
}, 'MsgPhp\\User\\Infra\\Form\\Type\\HashedPasswordType' => function () {
    return ($this->privates['MsgPhp\\User\\Infra\\Form\\Type\\HashedPasswordType'] ?? $this->load('getHashedPasswordTypeService.php'));
}, 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => function () {
    return ($this->privates['form.type.entity'] ?? $this->load('getForm_Type_EntityService.php'));
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => function () {
    return ($this->privates['form.type.choice'] ?? $this->load('getForm_Type_ChoiceService.php'));
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => function () {
    return ($this->privates['form.type.form'] ?? $this->load('getForm_Type_FormService.php'));
}]), ['Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () {
    yield 0 => ($this->privates['form.type_extension.form.http_foundation'] ?? $this->load('getForm_TypeExtension_Form_HttpFoundationService.php'));
    yield 1 => ($this->privates['form.type_extension.form.validator'] ?? $this->load('getForm_TypeExtension_Form_ValidatorService.php'));
    yield 2 => ($this->privates['form.type_extension.upload.validator'] ?? $this->load('getForm_TypeExtension_Upload_ValidatorService.php'));
    yield 3 => ($this->privates['form.type_extension.csrf'] ?? $this->load('getForm_TypeExtension_CsrfService.php'));
}, 4), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () {
    yield 0 => ($this->privates['form.type_extension.repeated.validator'] ?? ($this->privates['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension()));
}, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () {
    yield 0 => ($this->privates['form.type_extension.submit.validator'] ?? ($this->privates['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension()));
}, 1)], new RewindableGenerator(function () {
    yield 0 => ($this->privates['form.type_guesser.validator'] ?? $this->load('getForm_TypeGuesser_ValidatorService.php'));
    yield 1 => ($this->privates['form.type_guesser.doctrine'] ?? $this->load('getForm_TypeGuesser_DoctrineService.php'));
}, 2))], ($this->privates['form.resolved_type_factory'] ?? ($this->privates['form.resolved_type_factory'] = new \Symfony\Component\Form\ResolvedFormTypeFactory())));
