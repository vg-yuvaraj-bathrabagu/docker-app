++ dirname /data/personal/docker-app/shell/admin/setup.sh
+ script_full_path=/data/personal/docker-app/shell/admin
+ source /data/personal/docker-app/shell/admin/../.aws_config
++ export AWS_ACCESS_KEY_ID=AKIAIZ6ENRM52CQMFSTA
++ AWS_ACCESS_KEY_ID=AKIAIZ6ENRM52CQMFSTA
++ export AWS_SECRET_ACCESS_KEY=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
++ AWS_SECRET_ACCESS_KEY=q4ShyCPF38sccLYwnb0hcmKtMl820Rx/jo5naFCA
+ echo root mysql oncloudtime localhost AKIAIZ6ENRM52CQMFSTA q4ShyCPF38sccLYwnb0hcmKtMl820Rx/jo5naFCA test test s3://yuva-bucket/ s3://yuva-bucket/athena-output/ https://sqs.us-east-1.amazonaws.com/590297375119/test-yuva yuva-bucket no arn:aws:sns:us-east-1:590297375119:test-sns us-east-1 /data/personal/docker-app/var/log/setup.1580280500.log 1 oncloudtimePoolGroup oncloudtime-user-pool-dev oncloudtime-iam-role-dev oncloudtime-client-app oc-APP-001
root mysql oncloudtime localhost AKIAIZ6ENRM52CQMFSTA q4ShyCPF38sccLYwnb0hcmKtMl820Rx/jo5naFCA test test s3://yuva-bucket/ s3://yuva-bucket/athena-output/ https://sqs.us-east-1.amazonaws.com/590297375119/test-yuva yuva-bucket no arn:aws:sns:us-east-1:590297375119:test-sns us-east-1 /data/personal/docker-app/var/log/setup.1580280500.log 1 oncloudtimePoolGroup oncloudtime-user-pool-dev oncloudtime-iam-role-dev oncloudtime-client-app oc-APP-001
+ echo 'Starting installation'
Starting installation
+ aws s3api create-bucket --bucket yuva-bucket --region us-east-1
{
    "Location": "/yuva-bucket"
}
+ echo 'S3 bucket created'
S3 bucket created
+ athena_log_file_absolute_path=/data/personal/docker-app/var/log/setup.1580280500.log.athena
+ aws athena --region us-east-1 start-query-execution --query-string 'CREATE DATABASE IF NOT EXISTS test' --result-configuration OutputLocation=s3://yuva-bucket/athena-output/ --output text
++ cat /data/personal/docker-app/var/log/setup.1580280500.log.out
++ awk '{print $1}'
+ query_execution_id=54e6d66b-eada-4fca-acb6-ce9d88a57a8a
++ date '+%Y-%m-%d %H:%M'
+ START='2020-01-29 12:18'
+ count=0
+ true
++ date '+%Y-%m-%d %H:%M'
+ NOW='2020-01-29 12:18'
++ aws --region us-east-1 athena get-query-execution --query-execution-id 54e6d66b-eada-4fca-acb6-ce9d88a57a8a
++ grep State
++ sed 's: ::g'
+ query_status='"State":"SUCCEEDED",'
+ query_status_exit_code=0
+ echo 'The query execution exit code is 0 and "State":"SUCCEEDED",'
The query execution exit code is 0 and "State":"SUCCEEDED",
+ '[' 0 = 0 ']'
+ case $query_status in
+ break
++ date '+%Y-%m-%d %H:%M'
+ END='2020-01-29 12:18'
+ echo 'Athena output file /data/personal/docker-app/var/log/setup.1580280500.log.athena'
Athena output file /data/personal/docker-app/var/log/setup.1580280500.log.athena
+ aws athena --region us-east-1 get-query-results --query-execution-id 54e6d66b-eada-4fca-acb6-ce9d88a57a8a --no-paginate --output json
+ echo 'Athena directory created'
Athena directory created
+ '[' 1 = 1 ']'
+ echo 'Resetting the database'
Resetting the database
+ mysql -h localhost --user=root --password=mysql oncloudtime
+ athena_log_file_absolute_path_state_guide=/data/personal/docker-app/var/log/setup.1580280500.logstateguide.athena
+ state_guide_table_input_location=s3://yuva-bucket/app/nexus/stateguide/intake/
+ state_guide_table_output_location=s3://yuva-bucket/app/nexus/stateguide/output/
+ aws athena --region us-east-1 start-query-execution --query-string 'create external table IF NOT EXISTS stateguide (id int, accountid int, state string, code string, effectivedate date, salestransactionsthreshold int, salesdollarsthreshold double, nearingtransactioncountthreshold int, nearingsalesthreshold double, createdby string, datecreated string, lastupdatedby string, lastupdatedate string, uuid string) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\'','\'' LOCATION '\''s3://yuva-bucket/app/nexus/stateguide/intake/'\'';' --result-configuration OutputLocation=s3://yuva-bucket/app/nexus/stateguide/output/ --query-execution-context Database=test --output text
++ cat /data/personal/docker-app/var/log/setup.1580280500.logstateguide.out
++ awk '{print $1}'
+ query_execution_id_state_guide=f5b1b1f9-5677-4d1f-a1c3-13412d70d52e
++ date '+%Y-%m-%d %H:%M'
+ START='2020-01-29 12:19'
+ count=0
+ true
++ date '+%Y-%m-%d %H:%M'
+ NOW='2020-01-29 12:19'
++ aws --region us-east-1 athena get-query-execution --query-execution-id f5b1b1f9-5677-4d1f-a1c3-13412d70d52e
++ grep State
++ sed 's: ::g'
+ query_stateguide_status='"State":"SUCCEEDED",'
+ query_stateguide_status_exit_code=0
+ echo 'The query execution exit code for nexus is 0 and "State":"SUCCEEDED",'
The query execution exit code for nexus is 0 and "State":"SUCCEEDED",
+ '[' 0 = 0 ']'
+ case $query_stateguide_status in
+ break
++ date '+%Y-%m-%d %H:%M'
+ END='2020-01-29 12:19'
+ echo 'Athena output file /data/personal/docker-app/var/log/setup.1580280500.logstateguide.athena'
Athena output file /data/personal/docker-app/var/log/setup.1580280500.logstateguide.athena
+ aws athena --region us-east-1 get-query-results --query-execution-id f5b1b1f9-5677-4d1f-a1c3-13412d70d52e --no-paginate --output json
+ echo 'State guide table created'
State guide table created
+ echo 'Uploading the state guide file to S3'
Uploading the state guide file to S3
+ aws s3 --region us-east-1 cp /data/personal/docker-app/shell/admin/../../data/state_guide.csv s3://yuva-bucket/app/nexus/stateguide/intake/
Completed 5.3 KiB/5.3 KiB (3.4 KiB/s) with 1 file(s) remainingupload: ../data/state_guide.csv to s3://yuva-bucket/app/nexus/stateguide/intake/state_guide.csv
+ INSTALL_YAML_FILE=/data/personal/docker-app/shell/admin/../../config/install/install.yaml
+ COGNITO_POOL_ID_FILE=/data/personal/docker-app/var/log/setup.1580280500.log.aws_cognito_pool_id
+ COGNITO_POOL_CLIENT_ID_FILE=/data/personal/docker-app/var/log/setup.1580280500.log.aws_cognito_pool_client_id
+ COGNITO_USER_CREATE_FILE=/data/personal/docker-app/var/log/setup.1580280500.log.aws_cognito_create_users
+ COGNITO_USER_LIST_FILE=/data/personal/docker-app/var/log/setup.1580280500.log.aws_cognito_users
+ COGNITO_IAM_ROLE_ARN=/data/personal/docker-app/var/log/setup.1580280500.log.iam_role_arn
+ aws iam --region us-east-1 list-roles --output text --query 'Roles[?RoleName==`oncloudtime-iam-role-dev`].Arn'
++ cat /data/personal/docker-app/var/log/setup.1580280500.log.rolename_check
+ '[' -z arn:aws:iam::590297375119:role/oncloudtime-iam-role-dev ']'
+ echo 'Deleting Role oncloudtime-iam-role-dev'
Deleting Role oncloudtime-iam-role-dev
+ aws iam delete-role --role-name oncloudtime-iam-role-dev
+ aws iam --region us-east-1 create-role --role-name oncloudtime-iam-role-dev --description 'IAM Role for OnCloudtime Users' --assume-role-policy-document file:///data/personal/docker-app/shell/admin/../../config/policies/oncloudtime-iam-role-trust-policy.json --output text --query Role.Arn
+ aws cognito-idp --region us-east-1 list-user-pools --max-results 20 --output text --query 'UserPools[?Name==`oncloudtime-user-pool-dev`].Id'
++ cat /data/personal/docker-app/var/log/setup.1580280500.log.user_pool_name_check
+ existing_user_pools_ids=us-east-1_pBVuFccj8
+ [[ -z us-east-1_pBVuFccj8 ]]
+ for user_pool_id_for_deletion in ${existing_user_pools_ids}
+ echo 'Deleting User Pool with name oncloudtime-user-pool-dev and id us-east-1_pBVuFccj8'
Deleting User Pool with name oncloudtime-user-pool-dev and id us-east-1_pBVuFccj8
+ aws cognito-idp --region us-east-1 delete-user-pool --user-pool-id us-east-1_pBVuFccj8
+ aws cognito-idp --region us-east-1 create-user-pool --pool-name oncloudtime-user-pool-dev --username-attributes email --email-verification-message 'Please click the link below to verify your email address {####}' --email-verification-subject 'OnCloudTime Account Verification Link' --schema 'Name=accountid,AttributeDataType=Number,NumberAttributeConstraints={MinValue=1,MaxValue=4000000},Mutable=false' 'Name=uuid,AttributeDataType=String,Mutable=false,StringAttributeConstraints={MinLength=38,MaxLength=38}' --admin-create-user-config AllowAdminCreateUserOnly=false,UnusedAccountValidityDays=90 --output text --query UserPool.Id
++ cat /data/personal/docker-app/var/log/setup.1580280500.log.aws_cognito_pool_id
+ cognito_pool_id=us-east-1_Ra57HFqWj
+ echo 'The cognito pool id is us-east-1_Ra57HFqWj'
The cognito pool id is us-east-1_Ra57HFqWj
++ cat /data/personal/docker-app/var/log/setup.1580280500.log.iam_role_arn
+ cognito_group_iam_role_arn=arn:aws:iam::590297375119:role/oncloudtime-iam-role-dev
+ aws cognito-idp --region us-east-1 create-group --user-pool-id us-east-1_Ra57HFqWj --group-name oncloudtimePoolGroup --description 'Group for Oncloudtime User Pool' --role-arn arn:aws:iam::590297375119:role/oncloudtime-iam-role-dev
{
    "Group": {
        "GroupName": "oncloudtimePoolGroup",
        "UserPoolId": "us-east-1_Ra57HFqWj",
        "Description": "Group for Oncloudtime User Pool",
        "RoleArn": "arn:aws:iam::590297375119:role/oncloudtime-iam-role-dev",
        "LastModifiedDate": 1580280583.697,
        "CreationDate": 1580280583.697
    }
}
+ aws cognito-idp --region us-east-1 create-user-pool-client --user-pool-id us-east-1_Ra57HFqWj --client-name oncloudtime-client-app --refresh-token-validity 300 --no-generate-secret --explicit-auth-flows ADMIN_NO_SRP_AUTH USER_PASSWORD_AUTH --supported-identity-providers COGNITO --read-attributes email custom:uuid custom:accountid --write-attributes email custom:uuid custom:accountid --output text --query UserPoolClient.ClientId
++ cat /data/personal/docker-app/var/log/setup.1580280500.log.aws_cognito_pool_client_id
+ cognito_pool_client_id=5df3f4s9c4c40m0bdh99u665t6
+ echo 'The cognito pool client id is 5df3f4s9c4c40m0bdh99u665t6'
The cognito pool client id is 5df3f4s9c4c40m0bdh99u665t6
++ mktemp
+ tmp=/tmp/tmp.qeP6rFLyw6
+ mysql -h localhost --user=root --password=mysql --skip-column-names -e 'SELECT credential_email FROM app_user' oncloudtime
+ mysql -h localhost --user=root --password=mysql --skip-column-names -e 'SELECT CONCAT('\''--username '\'', credential_email, '\'' --user-attributes=Name="custom:uuid",Value="'\'' , REPLACE(uuid, '\''\n'\'', '\'''\''), '\''",Name=custom:accountid,Value="'\'', account_id, '\''",Name="email",Value="'\'', credential_email, '\''"'\'') FROM app_user' oncloudtime
+ echo 'Adding application users to us-east-1_Ra57HFqWj'
Adding application users to us-east-1_Ra57HFqWj
+ IFS=
+ read -r user_details
+ aws cognito-idp --region us-east-1 sign-up --client-id 5df3f4s9c4c40m0bdh99u665t6 --username admin@oncloudtime.com '--user-attributes=Name="custom:uuid",Value="3f35cde5-0f47-4c5f-bb59-31bbafcc9c64",Name=custom:accountid,Value="1",Name="email",Value="admin@oncloudtime.com"' --password oc-APP-001
{
    "UserConfirmed": false,
    "UserSub": "4ec772d8-c71e-41b4-813e-98e15f6f7c98"
}
+ IFS=
+ read -r user_details
+ aws cognito-idp --region us-east-1 sign-up --client-id 5df3f4s9c4c40m0bdh99u665t6 --username ATS002@oncloudtime.com '--user-attributes=Name="custom:uuid",Value="f1cc1e22-6fce-4ce1-88e1-faf704ecf123",Name=custom:accountid,Value="1",Name="email",Value="ATS002@oncloudtime.com"' --password oc-APP-001
{
    "UserConfirmed": false,
    "UserSub": "323e351c-96ef-4f6a-89ca-6491a0613494"
}
+ IFS=
+ read -r user_details
+ aws cognito-idp --region us-east-1 sign-up --client-id 5df3f4s9c4c40m0bdh99u665t6 --username ATS003@oncloudtime.com '--user-attributes=Name="custom:uuid",Value="6eb865f7-d5d6-4f04-bf6d-4a0ee05a8081",Name=custom:accountid,Value="2",Name="email",Value="ATS003@oncloudtime.com"' --password oc-APP-001
{
    "UserConfirmed": false,
    "UserSub": "94a9e8f5-1c29-4d97-abfc-78c71fef2f83"
}
+ IFS=
+ read -r user_details
+ aws cognito-idp --region us-east-1 sign-up --client-id 5df3f4s9c4c40m0bdh99u665t6 --username ATS004@oncloudtime.com '--user-attributes=Name="custom:uuid",Value="5df79a88-b73d-47c6-b482-eb681f3c9b4d",Name=custom:accountid,Value="2",Name="email",Value="ATS004@oncloudtime.com"' --password oc-APP-001
{
    "UserConfirmed": false,
    "UserSub": "bcc294d9-4ac3-494c-a234-39ea84e4a478"
}
+ IFS=
+ read -r user_details
+ aws cognito-idp --region us-east-1 sign-up --client-id 5df3f4s9c4c40m0bdh99u665t6 --username fryawe@oncloudtime.com '--user-attributes=Name="custom:uuid",Value="bb1de4ca-e7ee-49e9-8096-f3fa45082e2b",Name=custom:accountid,Value="2",Name="email",Value="fryawe@oncloudtime.com"' --password oc-APP-001
{
    "UserConfirmed": false,
    "UserSub": "8a2246c2-3578-4c3e-872a-658a3e33a63f"
}
+ IFS=
+ read -r user_details
+ aws cognito-idp --region us-east-1 sign-up --client-id 5df3f4s9c4c40m0bdh99u665t6 --username northorp.admin@oncloudtime.com '--user-attributes=Name="custom:uuid",Value="ecf570f6-d7fd-4c54-8946-c3ec56b169ad",Name=custom:accountid,Value="3",Name="email",Value="northorp.admin@oncloudtime.com"' --password oc-APP-001
{
    "UserConfirmed": false,
    "UserSub": "5ab7959d-77d4-4099-9c8e-e3a320aa04e0"
}
+ IFS=
+ read -r user_details
+ aws cognito-idp --region us-east-1 sign-up --client-id 5df3f4s9c4c40m0bdh99u665t6 --username northorp.user@oncloudtime.com '--user-attributes=Name="custom:uuid",Value="c67d1c88-0613-4890-89d6-f90879e96c87",Name=custom:accountid,Value="3",Name="email",Value="northorp.user@oncloudtime.com"' --password oc-APP-001
{
    "UserConfirmed": false,
    "UserSub": "6e251274-f39a-498f-a548-3dfeab797397"
}
+ IFS=
+ read -r user_details
+ aws cognito-idp --region us-east-1 sign-up --client-id 5df3f4s9c4c40m0bdh99u665t6 --username walmart.admin@oncloudtime.com '--user-attributes=Name="custom:uuid",Value="01965cce-f45e-496c-8364-87998b2ff3bc",Name=custom:accountid,Value="4",Name="email",Value="walmart.admin@oncloudtime.com"' --password oc-APP-001
{
    "UserConfirmed": false,
    "UserSub": "2a1ec7f7-e507-4a23-84ed-0e99c7688a9f"
}
+ IFS=
+ read -r user_details
+ aws cognito-idp --region us-east-1 sign-up --client-id 5df3f4s9c4c40m0bdh99u665t6 --username walmart.user@oncloudtime.com '--user-attributes=Name="custom:uuid",Value="c31558bb-4215-4dd5-bc88-8f75e8716706",Name=custom:accountid,Value="4",Name="email",Value="walmart.user@oncloudtime.com"' --password oc-APP-001
{
    "UserConfirmed": false,
    "UserSub": "654786c6-7e81-4f23-abf3-73570c2f3c03"
}
+ IFS=
+ read -r user_details
+ echo 'Setting passwords and confirming signup for application users in us-east-1_Ra57HFqWj'
Setting passwords and confirming signup for application users in us-east-1_Ra57HFqWj
+ IFS=
+ read -r username
+ echo 'confirming signup for  admin@oncloudtime.com'
confirming signup for  admin@oncloudtime.com
+ aws cognito-idp --region us-east-1 admin-confirm-sign-up --user-pool-id us-east-1_Ra57HFqWj --username admin@oncloudtime.com
++ aws cognito-idp --region us-east-1 admin-get-user --user-pool-id us-east-1_Ra57HFqWj --username admin@oncloudtime.com --output text --query Username
+ cognito_username=4ec772d8-c71e-41b4-813e-98e15f6f7c98
+ aws cognito-idp --region us-east-1 admin-add-user-to-group --user-pool-id us-east-1_Ra57HFqWj --username 4ec772d8-c71e-41b4-813e-98e15f6f7c98 --group-name oncloudtimePoolGroup
+ IFS=
+ read -r username
+ echo 'confirming signup for  ATS002@oncloudtime.com'
confirming signup for  ATS002@oncloudtime.com
+ aws cognito-idp --region us-east-1 admin-confirm-sign-up --user-pool-id us-east-1_Ra57HFqWj --username ATS002@oncloudtime.com
++ aws cognito-idp --region us-east-1 admin-get-user --user-pool-id us-east-1_Ra57HFqWj --username ATS002@oncloudtime.com --output text --query Username
+ cognito_username=323e351c-96ef-4f6a-89ca-6491a0613494
+ aws cognito-idp --region us-east-1 admin-add-user-to-group --user-pool-id us-east-1_Ra57HFqWj --username 323e351c-96ef-4f6a-89ca-6491a0613494 --group-name oncloudtimePoolGroup
+ IFS=
+ read -r username
+ echo 'confirming signup for  ATS003@oncloudtime.com'
confirming signup for  ATS003@oncloudtime.com
+ aws cognito-idp --region us-east-1 admin-confirm-sign-up --user-pool-id us-east-1_Ra57HFqWj --username ATS003@oncloudtime.com
++ aws cognito-idp --region us-east-1 admin-get-user --user-pool-id us-east-1_Ra57HFqWj --username ATS003@oncloudtime.com --output text --query Username
+ cognito_username=94a9e8f5-1c29-4d97-abfc-78c71fef2f83
+ aws cognito-idp --region us-east-1 admin-add-user-to-group --user-pool-id us-east-1_Ra57HFqWj --username 94a9e8f5-1c29-4d97-abfc-78c71fef2f83 --group-name oncloudtimePoolGroup
+ IFS=
+ read -r username
+ echo 'confirming signup for  ATS004@oncloudtime.com'
confirming signup for  ATS004@oncloudtime.com
+ aws cognito-idp --region us-east-1 admin-confirm-sign-up --user-pool-id us-east-1_Ra57HFqWj --username ATS004@oncloudtime.com
++ aws cognito-idp --region us-east-1 admin-get-user --user-pool-id us-east-1_Ra57HFqWj --username ATS004@oncloudtime.com --output text --query Username
+ cognito_username=bcc294d9-4ac3-494c-a234-39ea84e4a478
+ aws cognito-idp --region us-east-1 admin-add-user-to-group --user-pool-id us-east-1_Ra57HFqWj --username bcc294d9-4ac3-494c-a234-39ea84e4a478 --group-name oncloudtimePoolGroup
+ IFS=
+ read -r username
+ echo 'confirming signup for  fryawe@oncloudtime.com'
confirming signup for  fryawe@oncloudtime.com
+ aws cognito-idp --region us-east-1 admin-confirm-sign-up --user-pool-id us-east-1_Ra57HFqWj --username fryawe@oncloudtime.com
++ aws cognito-idp --region us-east-1 admin-get-user --user-pool-id us-east-1_Ra57HFqWj --username fryawe@oncloudtime.com --output text --query Username
+ cognito_username=8a2246c2-3578-4c3e-872a-658a3e33a63f
+ aws cognito-idp --region us-east-1 admin-add-user-to-group --user-pool-id us-east-1_Ra57HFqWj --username 8a2246c2-3578-4c3e-872a-658a3e33a63f --group-name oncloudtimePoolGroup
+ IFS=
+ read -r username
+ echo 'confirming signup for  northorp.admin@oncloudtime.com'
confirming signup for  northorp.admin@oncloudtime.com
+ aws cognito-idp --region us-east-1 admin-confirm-sign-up --user-pool-id us-east-1_Ra57HFqWj --username northorp.admin@oncloudtime.com
++ aws cognito-idp --region us-east-1 admin-get-user --user-pool-id us-east-1_Ra57HFqWj --username northorp.admin@oncloudtime.com --output text --query Username
+ cognito_username=5ab7959d-77d4-4099-9c8e-e3a320aa04e0
+ aws cognito-idp --region us-east-1 admin-add-user-to-group --user-pool-id us-east-1_Ra57HFqWj --username 5ab7959d-77d4-4099-9c8e-e3a320aa04e0 --group-name oncloudtimePoolGroup
+ IFS=
+ read -r username
+ echo 'confirming signup for  northorp.user@oncloudtime.com'
confirming signup for  northorp.user@oncloudtime.com
+ aws cognito-idp --region us-east-1 admin-confirm-sign-up --user-pool-id us-east-1_Ra57HFqWj --username northorp.user@oncloudtime.com
++ aws cognito-idp --region us-east-1 admin-get-user --user-pool-id us-east-1_Ra57HFqWj --username northorp.user@oncloudtime.com --output text --query Username
+ cognito_username=6e251274-f39a-498f-a548-3dfeab797397
+ aws cognito-idp --region us-east-1 admin-add-user-to-group --user-pool-id us-east-1_Ra57HFqWj --username 6e251274-f39a-498f-a548-3dfeab797397 --group-name oncloudtimePoolGroup
+ IFS=
+ read -r username
+ echo 'confirming signup for  walmart.admin@oncloudtime.com'
confirming signup for  walmart.admin@oncloudtime.com
+ aws cognito-idp --region us-east-1 admin-confirm-sign-up --user-pool-id us-east-1_Ra57HFqWj --username walmart.admin@oncloudtime.com
++ aws cognito-idp --region us-east-1 admin-get-user --user-pool-id us-east-1_Ra57HFqWj --username walmart.admin@oncloudtime.com --output text --query Username
+ cognito_username=2a1ec7f7-e507-4a23-84ed-0e99c7688a9f
+ aws cognito-idp --region us-east-1 admin-add-user-to-group --user-pool-id us-east-1_Ra57HFqWj --username 2a1ec7f7-e507-4a23-84ed-0e99c7688a9f --group-name oncloudtimePoolGroup
+ IFS=
+ read -r username
+ echo 'confirming signup for  walmart.user@oncloudtime.com'
confirming signup for  walmart.user@oncloudtime.com
+ aws cognito-idp --region us-east-1 admin-confirm-sign-up --user-pool-id us-east-1_Ra57HFqWj --username walmart.user@oncloudtime.com
++ aws cognito-idp --region us-east-1 admin-get-user --user-pool-id us-east-1_Ra57HFqWj --username walmart.user@oncloudtime.com --output text --query Username
+ cognito_username=654786c6-7e81-4f23-abf3-73570c2f3c03
+ aws cognito-idp --region us-east-1 admin-add-user-to-group --user-pool-id us-east-1_Ra57HFqWj --username 654786c6-7e81-4f23-abf3-73570c2f3c03 --group-name oncloudtimePoolGroup
+ IFS=
+ read -r username
+ [[ -f /data/personal/docker-app/shell/admin/../app_config_url.cnf ]]
+ echo 'Secrets config file exists and will be read'
Secrets config file exists and will be read
+ [[ -s /data/personal/docker-app/shell/admin/../app_config_url.cnf ]]
+ echo 'Secrets config file exists and is not empty'
Secrets config file exists and is not empty
++ cat /data/personal/docker-app/shell/admin/../app_config_url.cnf
+ config_url=arn:aws:secretsmanager:us-east-1:168790824676:secret:oncloudtime_dev-B6arpG
+ echo 'The secret url is arn:aws:secretsmanager:us-east-1:168790824676:secret:oncloudtime_dev-B6arpG'
The secret url is arn:aws:secretsmanager:us-east-1:168790824676:secret:oncloudtime_dev-B6arpG
+ '[' '!' -z arn:aws:secretsmanager:us-east-1:168790824676:secret:oncloudtime_dev-B6arpG ']'
+ aws secretsmanager --region us-east-1 put-secret-value --secret-id arn:aws:secretsmanager:us-east-1:168790824676:secret:oncloudtime_dev-B6arpG --secret-string file:///data/personal/docker-app/shell/admin/../../config/install/install.yaml
usage: aws [options] <command> <subcommand> [<subcommand> ...] [parameters]
To see help text, you can run:

  aws help
  aws <command> help
  aws <command> <subcommand> help
aws: error: argument command: Invalid choice, valid choices are:

acm                                      | alexaforbusiness                        
apigateway                               | application-autoscaling                 
appstream                                | appsync                                 
athena                                   | autoscaling                             
autoscaling-plans                        | batch                                   
budgets                                  | ce                                      
cloud9                                   | clouddirectory                          
cloudformation                           | cloudfront                              
cloudhsm                                 | cloudhsmv2                              
cloudsearch                              | cloudsearchdomain                       
cloudtrail                               | cloudwatch                              
codebuild                                | codecommit                              
codepipeline                             | codestar                                
cognito-identity                         | cognito-idp                             
cognito-sync                             | comprehend                              
cur                                      | datapipeline                            
dax                                      | devicefarm                              
directconnect                            | discovery                               
dms                                      | ds                                      
dynamodb                                 | dynamodbstreams                         
ec2                                      | ecr                                     
ecs                                      | efs                                     
elasticache                              | elasticbeanstalk                        
elastictranscoder                        | elb                                     
elbv2                                    | emr                                     
es                                       | events                                  
firehose                                 | gamelift                                
glacier                                  | glue                                    
greengrass                               | guardduty                               
health                                   | iam                                     
importexport                             | inspector                               
iot                                      | iot-data                                
iot-jobs-data                            | kinesis                                 
kinesis-video-archived-media             | kinesis-video-media                     
kinesisanalytics                         | kinesisvideo                            
kms                                      | lambda                                  
lex-models                               | lex-runtime                             
lightsail                                | logs                                    
machinelearning                          | marketplace-entitlement                 
marketplacecommerceanalytics             | mediaconvert                            
medialive                                | mediapackage                            
mediastore                               | mediastore-data                         
meteringmarketplace                      | mgh                                     
mobile                                   | mq                                      
mturk                                    | opsworks                                
opsworkscm                               | organizations                           
pinpoint                                 | polly                                   
pricing                                  | rds                                     
redshift                                 | rekognition                             
resource-groups                          | resourcegroupstaggingapi                
route53                                  | route53domains                          
sagemaker                                | sagemaker-runtime                       
sdb                                      | serverlessrepo                          
servicecatalog                           | servicediscovery                        
ses                                      | shield                                  
sms                                      | snowball                                
sns                                      | sqs                                     
ssm                                      | stepfunctions                           
storagegateway                           | sts                                     
support                                  | swf                                     
transcribe                               | translate                               
waf                                      | waf-regional                            
workdocs                                 | workmail                                
workspaces                               | xray                                    
s3api                                    | s3                                      
configure                                | deploy                                  
configservice                            | opsworks-cm                             
runtime.sagemaker                        | history                                 
help                                    
